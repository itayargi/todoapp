{"version":3,"sources":["store.ts","TodoItem.tsx","TodoList.tsx","Note.tsx","NoteList.tsx","NewNote.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["noteStore","toJS","this","notes","splice","name","length","push","id","shortid","generate","todoList","creationDate","Date","now","lastModified","alert","noteId","todoTitle","target","find","n","title","done","localStorage","setItem","JSON","stringify","todoId","status","todoItem","todo","observable","action","window","TodoItem","inject","handleChange","e","data","injected","setTodoStatus","props","checked","Item","Content","Checkbox","label","onChange","React","TodoList","Group","divided","map","i","key","Note","setState","inputField","currentTarget","value","addTodo","addToDo","state","Card","style","width","marginLeft","header","extra","dayjs","format","Input","placeholder","Button","marginTop","onClick","NoteList","observer","Grid","columns","Row","note","Column","NewNote","inputValue","addNoteToStore","addNote","type","primary","App","className","Container","textDecoration","backgroundColor","border","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d04235c.chunk.js","sourcesContent":["import { observable, action, toJS } from \"mobx\";\r\nimport shortid from 'shortid';\r\n//todo\r\nexport interface ITodoItem {\r\n    id: string;\r\n    title: string;\r\n    done: boolean;\r\n}\r\n//note\r\nexport interface INote {\r\n    id: string;\r\n    name: string;\r\n    lastModified: number;\r\n    creationDate: number;\r\n    todoList: ITodoItem[];\r\n}\r\n\r\ninterface IaddTodo {\r\n    noteId: string, \r\n    todoTitle: string\r\n    \r\n}\r\n\r\n\r\nexport class NoteStore {\r\n    @observable notes: INote[] = [];\r\n    @observable todos: ITodoItem[] = [];\r\n\r\n    getNotes() {\r\n        return toJS(this.notes);\r\n    }\r\n\r\n    @action\r\n    public importNotes(notes: INote[]) {\r\n        this.notes = notes.splice(0);\r\n    }\r\n\r\n    @action\r\n    public addNote(name: string) {\r\n        if(!name) {\r\n            alert ('Please enter a name for the note')\r\n            return;\r\n        }\r\n        if(this.notes.length<10){\r\n        this.notes.push({\r\n            name, \r\n            id: shortid.generate(),\r\n            todoList: [],\r\n            creationDate: Date.now(),\r\n            lastModified: Date.now()\r\n        });\r\n        }\r\n        else{\r\n            alert('Only 10 notes are allowed')\r\n        }\r\n    }\r\n\r\n   \r\n    @action\r\n    public addToDo({ noteId, todoTitle }: IaddTodo) {\r\n        let target = this.notes.find(n => n.id === noteId);\r\n        if (target && todoTitle) {\r\n            target.lastModified = Date.now();\r\n            target.todoList.push({\r\n                id: shortid.generate(),\r\n                title: todoTitle,\r\n                done: false,\r\n                \r\n            });\r\n            localStorage.setItem(\"notes\", JSON.stringify(this.notes));\r\n        }\r\n    }\r\n\r\n    @action\r\n    public setTodoStatus(noteId: string, todoId: string, status: boolean) {\r\n        let target = this.notes.find(n => n.id === noteId);\r\n        if (target) {\r\n            let todoItem = target.todoList.find(todo => todo.id === todoId);\r\n            if (todoItem) {\r\n                target.lastModified = Date.now();\r\n                todoItem.done = status;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst noteStore = new NoteStore();\r\n\r\n// @ts-ignore\r\nwindow.noteStore = noteStore;\r\n\r\nexport default noteStore;","import * as React from 'react';\r\nimport { Item } from 'semantic-ui-react'\r\nimport { Checkbox } from 'semantic-ui-react'\r\nimport { ITodoItem, NoteStore } from './store';\r\nimport { inject } from 'mobx-react';\r\n\r\ninterface IProps {\r\n    todo: ITodoItem\r\n    noteId: string;\r\n}\r\n\r\ninterface IState {\r\n    done: boolean;\r\n}\r\n\r\ninterface Injected extends IProps {\r\n    noteStore: NoteStore;\r\n}\r\n\r\n@inject('noteStore')\r\nexport default class TodoItem extends React.Component<IProps, IState> {\r\n\r\n\r\n    public get injected() {\r\n        return this.props as Injected;\r\n    }\r\n    \r\n    public handleChange = (e: any, data: any) => {\r\n        this.injected.noteStore.setTodoStatus(this.props.noteId, this.props.todo.id, data.checked);\r\n\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <Item>\r\n                <Item.Content> \r\n                    <Checkbox label={this.props.todo.title} checked={this.props.todo.done} onChange={this.handleChange} />\r\n                </Item.Content>\r\n            </Item>\r\n        )\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Item } from 'semantic-ui-react'\r\nimport { ITodoItem } from './store';\r\nimport TodoItem from './TodoItem';\r\n\r\n\r\ninterface IProps {\r\n    todoList: ITodoItem[];\r\n    noteId: string;\r\n}\r\n\r\nexport default class TodoList extends React.Component<IProps, {}> {\r\n    public render() {\r\n        return (\r\n            <Item.Group divided>\r\n                {this.props.todoList.map((todo,i) => <TodoItem key={i} noteId={this.props.noteId} todo={todo} />)}\r\n            </Item.Group>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { Input, Button } from 'semantic-ui-react'\r\nimport { INote, NoteStore } from './store';\r\nimport { Card } from 'semantic-ui-react';\r\nimport dayjs from 'dayjs';\r\nimport { inject } from 'mobx-react';\r\nimport TodoList from './TodoList';\r\n\r\ninterface IState {\r\n    inputField: string;\r\n} \r\n\r\ninterface Injected extends INote {\r\n    noteStore: NoteStore;\r\n}\r\n\r\n@inject('noteStore')\r\nexport default class Note extends React.Component<INote, IState> {\r\n    \r\n    public constructor(props: INote) {\r\n        super(props);\r\n        this.state = {\r\n            inputField: ''\r\n        }\r\n    }\r\n\r\n    public get injected() {\r\n        return this.props as Injected;\r\n    }\r\n    //input text for new todo\r\n    public handleChange = (e: any) => {\r\n        this.setState({ inputField: e.currentTarget.value });\r\n    }\r\n\r\n    public addTodo = () => {\r\n        this.injected.noteStore.addToDo({\r\n            noteId: this.props.id, \r\n            todoTitle: this.state.inputField \r\n        });\r\n            \r\n            }\r\n     \r\n    \r\n\r\n\r\n    public render() {\r\n        return (\r\n            <Card style={{width:\"100%\", marginLeft:10}}>\r\n                <Card.Content header={this.props.name} />\r\n                <Card.Content extra>\r\n                    <div>Created at: {dayjs(this.props.creationDate).format(\"D/MM/YY HH:mm:ss\")}</div>\r\n                    <div>modified at: {dayjs(this.props.lastModified).format(\"D/MM/YY HH:mm:ss\")}</div>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Input id=\"imputAddTodo\" style={{width:\"100%\"}} placeholder='Add todo' onChange={this.handleChange} />\r\n                    <Button style={{marginTop:10, width:\"100%\"}} onClick={this.addTodo}>Add todo</Button>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <TodoList noteId={this.props.id} todoList={this.props.todoList} />\r\n                </Card.Content>\r\n            </Card>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer, inject } from \"mobx-react\"\r\nimport { NoteStore } from './store'\r\nimport Note from './Note';\r\nimport { toJS } from 'mobx';\r\nimport { Grid } from 'semantic-ui-react'\r\ninterface IProps {\r\n\r\n}\r\n\r\ninterface Injected extends IProps {\r\n    noteStore: NoteStore;\r\n}\r\n\r\n\r\n\r\n@inject('noteStore')\r\n@observer\r\nexport default class NoteList extends React.Component<IProps, {}> {\r\n    \r\n\r\n    public get injected() {\r\n        return this.props as Injected;\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    public render() {\r\n        const notes = toJS(this.injected.noteStore.notes)\r\n\r\n        return (\r\n            <Grid style={{marginTop:10}} columns={4} divided>\r\n                <Grid.Row>\r\n                    \r\n                {notes.map((note,i) => (\r\n                   \r\n                       \r\n                         <Grid.Column key={i} style={{marginTop:5}}>\r\n                    <Note \r\n                        id={note.id} \r\n                        creationDate={note.creationDate}\r\n                        lastModified={note.lastModified}\r\n                        name={note.name}\r\n                        todoList={note.todoList}\r\n                       \r\n                    />\r\n\r\n                    </Grid.Column>\r\n                  \r\n                ))}\r\n                </Grid.Row>\r\n           </Grid>\r\n        );              \r\n        \r\n    }\r\n}","import * as React from 'react';\r\nimport { Input, Button } from 'semantic-ui-react'\r\nimport { inject } from 'mobx-react';\r\nimport { NoteStore } from './store';\r\n\r\n\r\ninterface IState {\r\n    inputValue: string;\r\n}\r\n\r\ninterface IProps { }\r\n\r\ninterface Injected extends IProps {\r\n    noteStore: NoteStore;\r\n}\r\n\r\n\r\n@inject('noteStore')\r\nexport default class NewNote extends React.Component<IProps, IState> {\r\n\r\n    state: IState = {\r\n        inputValue: ''\r\n    }\r\n\r\n    public get injected() {\r\n        return this.props as Injected;\r\n    }\r\n\r\n    //input text for new notes\r\n    public handleChange = (e: any) => {\r\n        this.setState({ inputValue: e.currentTarget.value });\r\n    }\r\n\r\n    public addNoteToStore = () => {\r\n        this.injected.noteStore.addNote(this.state.inputValue);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <Input type=\"text\" onChange={this.handleChange} />\r\n                <Button style={{marginLeft:5}} primary onClick={this.addNoteToStore}>Add Note</Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\nimport { Provider } from 'mobx-react';\nimport noteStore from './store';\nimport NoteList from './NoteList';\nimport NewNote from './NewNote';\nimport './App.css';\n\n\n\nfunction App() {\n\n  \n  return (\n    <Provider noteStore={noteStore}>\n    <div className=\"App\">\n      \n        <Container >\n      <div id=\"todoLogo\"></div>\n       <h1 style={{textDecoration:\"underLine\"}}>Enter new note:</h1>\n          <NewNote />\n          \n        <h2 style={{backgroundColor:\"white\",border:\"solid\" ,width:\"150px\", textDecoration:\"underLine\"}}>List of notes:</h2>\n         <NoteList />\n         \n        </Container>\n      </div>\n\n    </Provider>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}